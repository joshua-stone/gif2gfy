#!/usr/bin/env python

from argparse import ArgumentParser
from sys import exit, version_info
from mimetypes import guess_type
from os.path import isfile
from tempfile import NamedTemporaryFile
from subprocess import call
from base64 import b64encode
from string import Template

def get_mimetype(filename):
  return(guess_type(filename)[0])

def get_extension(filename):
  return(get_mimetype(filename).split("/")[1])

def to_base64(filename):
  with open(filename, "rb") as f:
    return(b64encode(f.read()))

html = Template("""
<!DOCTYPE html>
<html>
  <meta charset=\"utf-8\">
  <title>$title (${width}x${height}px)</title>
  <style type=\"text/css\">
    * {
      margin: 0;
      padding: 0;
    }
    html, body {
      width: 100%;
      height: 100%;
    }
    html {
      display: table;
    }
    body {
      display: table-cell;
      vertical-align: middle;
      text-align: center;
      background-color: ${COLOR};
    }
    video, source {
      display: block;
      margin: 0 auto;
    }
  </style>
  <video width=\"${width}\" height=\"${height}\" autoplay=\"autoplay\" loop=\"\">
    <source type=\"${mimetype}\" src=\"data:${mimetype};base64,${data}\">
  </video>
</html>
""")

def main():

  parser = ArgumentParser("gif2gfy")
  parser.add_argument("-i", "--input", help="Input file")
  parser.add_argument("-c", "--color", help="Choose background color of gfy; default is black")
  parser.add_argument("-o" "--output", help="Set filename of output; default is o.{mp4,webm}.html")
  parser.add_argument("-p", "--path", help="Specify a custom directory to look for FFmpeg and FFprobe")
  parser.add_argument("-q", "--quality", help="Set bitrate in MBs for gif-to-webm conversion; default is 3.5")
  parser.add_argument("-t", "--title", help="Set title in HTML page; default is whatever -o is set to")

  args = parser.parse_args()

  if not args.input:
    print("No file specified. Aborting.")
    exit()

  if not isfile(args.input):
    print("{0} isn't a file. Aborting.".format(args.input))
    exit()

  # Python3.3 adds sys.version_info, which is a more reliable method for checking
  # program availability than distutils.spawn.find_executable()
  if version_info >= (3, 3):
    from shutil import which
  else:
    from distutils.spawn import find_executable as which

  ffmpeg, ffprobe = which("ffmpeg"), which("ffprobe")
  
  if not ffmpeg:
    print("FFmpeg needs to be installed to continue. Aborting.")
    exit()
  
  in_mimetype = get_mimetype(args.input)
  in_extension = get_extension(args.input)

  with NamedTemporaryFile() as temp:
    if in_extension in ("webm", "mp4"):
      custom = "-f {0} -vcodec copy -an".format(in_extension)
      out_mimetype = in_mimetype

    elif in_extension == "gif":
      bitrate = "{0}M".format(args.quality, args.quality, args.quality)
      custom = "-f webm -minrate {0} -maxrate {1} -b:v {2}".format(bitrate, bitrate, bitrate)
      out_mimetype = "video/webm"

    else:
      print("Not a supported filetype. Aborting.")
      exit()

    parameters = "-i {0} -y -loglevel quiet {1}".format(args.input, custom)
    
    call("{0} {1} {2}".format(ffmpeg, parameters, temp.name), shell=True)

    
if __name__ == "__main__":
  main()

