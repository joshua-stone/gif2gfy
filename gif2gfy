#!/bin/sh

# Make script halt if encountering an error, as opposed to the standard shell
# behavior of ignoring them
set -e

# Use a POSIX-friendly way of detecting whether a command is installed
is_available() {
  command -v "${1}" > /dev/null 2>&1
}

is_null() {
  [ -z "${1}" ]
}

get_mimetype() {
  FILE="${1}"

  file --brief --mime-type "${FILE}"
}

while getopts ":dc:i:o:q:t:h" opt; do
  case $opt in
    h)
      echo "An FFmpeg frontend for converting gifs into standalone gfy files."
      echo
      echo "Usage: gif2gfy -i infile -o outfile"
      echo
      echo "Getting help:"
      echo "  -h     Print basic options available"
      echo
      echo "Flags available:"
      echo "  -c     Choose background color of gfy; default is black"
      echo "  -o     Set filename of output; default is o.html"
      echo "  -q     Set bitrate in MBs for gif-to-webm conversion; default is 3.5"
      echo "  -t     Set title in HTML page; default is whatever -o is set to"
      echo "  -d     Disable limiting the video to screen height/width"
      exit 1
      ;;
    i)
      IN_FILE="${OPTARG}"
      ;;
    c)
      COLOR="${OPTARG}"
      ;;
    o)
      OUT_FILE="${OPTARG}"
      ;;
    q)
      Q="${OPTARG}"
      ;;
    t)
      TITLE="${OPTARG}"
      ;;
    d)
      DNRESIZE="/**/"
      ;;
    \?)
      echo "Invalid option: -$OPTARG. Aborting" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument. Aborting." >&2
      exit 1
      ;;
  esac
done

# Set default values if they aren't defined in GETOPTS
if is_null "${Q}"; then
  Q="3.5"
fi

if is_null "${OUT_FILE}"; then
  OUT_FILE="o.html"
fi

if is_null "${COLOR}"; then
  COLOR="black"
fi

if is_null "${TITLE}"; then
  TITLE="${OUT_FILE}"
fi

if is_null "${DNRESIZE}"; then
  DNRESIZE="video {
      max-height: 100%;
      max-width: 100%;
    }"
fi

if is_available "ffmpeg"; then
  BACKEND="ffmpeg"
elif [ -x "ffmpeg-2.4.2-64bit-static/ffmpeg" ]; then
  BACKEND="ffmpeg-2.4.2-64bit-static/ffmpeg"
else
  echo "FFmpeg needs to be installed to continue. Aborting."
  exit 1
fi

if is_available "ffprobe"; then
  PROBE="ffprobe"
elif [ -x "ffmpeg-2.4.2-64bit-static/ffprobe" ]; then
  PROBE="ffmpeg-2.4.2-64bit-static/ffprobe"
else
  echo "FFprobe needs to be installed to continue. Aborting."
  exit 1
fi

if is_null "${IN_FILE}"; then
  echo "No file specified. Aborting."
  exit 1
fi

if [ ! -f "${IN_FILE}" ]; then
  echo "${INPUT} isn't a file. Aborting."
  exit 1
fi

IN_MIMETYPE="$(get_mimetype "${IN_FILE}")"

# Temporary location for FFmpeg output that'll be deleted once the script ends
GFY="$(mktemp --dry-run)" || echo 1
trap 'rm -f "${GFY}"' EXIT

# If file is .webm, then simply extract the encoded video losslessly
if [ "${IN_MIMETYPE}" = "video/webm" ]; then
  PARAMETERS="-f webm -loglevel quiet -vcodec copy -an"
  "${BACKEND}" -i "${IN_FILE}" ${PARAMETERS} "${GFY}"

elif [ "${IN_MIMETYPE}" = "image/gif" ]; then
  PARAMETERS="-f webm -loglevel quiet -minrate ${Q}M -maxrate ${Q}M -b:v ${Q}M"
  "${BACKEND}" -i "${IN_FILE}" ${PARAMETERS} "${GFY}"
else
  echo "Not a supported filetype. Aborting."
  exit 1
fi

PARAMETERS="-loglevel quiet -show_entries stream=width,height -print_format csv"
VIDEO_DATA="$("${PROBE}" "${GFY}" ${PARAMETERS})"

OUT_MIMETYPE="$(get_mimetype "${GFY}")"
WIDTH="$(echo "${VIDEO_DATA}" | cut -d "," -f2)"
HEIGHT="$(echo "${VIDEO_DATA}"|  cut -d "," -f3)"
DATA="$(base64 --wrap 0 "${GFY}")"

cat << HTML > "${OUT_FILE}"
<!DOCTYPE html>
<html>
  <meta charset="utf-8">
  <title>${TITLE} (${WIDTH}x${HEIGHT}px)</title>
  <style type="text/css">
    * {
      margin: 0;
      padding: 0;
    }
    html, body {
      width: 100%;
      height: 100%;
    }
    html {
      display: table;
    }
    body {
      display: table-cell;
      vertical-align: middle;
      text-align: center;
      background-color: ${COLOR};
    }
    video, source {
      display: block;
      margin: 0 auto;
    }
    ${DNRESIZE}
  </style>
  <video width="${WIDTH}" height="${HEIGHT}" autoplay="autoplay" loop="">
    <source type="${OUT_MIMETYPE}" src="data:${OUT_MIMETYPE};base64,${DATA}">
  </video>
</html>
HTML

realpath "${OUT_FILE}"
