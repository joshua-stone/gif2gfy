#!/usr/bin/env python

from argparse import ArgumentParser
from sys import exit, version_info
from mimetypes import guess_type
from os.path import isfile, abspath, basename
from base64 import b64encode
from string import Template
from subprocess import check_call, check_output
from json import loads
from os import sep, access, X_OK
from tempfile import NamedTemporaryFile

def get_mimetype(filename):
  return(guess_type(filename)[0])

def get_extension(filename):
  return(get_mimetype(filename).split("/")[1])

def is_executable(filename):
  return(isfile(filename) and access(filename, X_OK))

class ffmpeg(object):
  """
  Encapsulate FFmpeg in a class for easier manipulation and better
  maintainability
  """
  def __init__(self, ffmpeg, ffprobe):
    self.__ffmpeg, self.__ffprobe = ffmpeg, ffprobe

  @property
  def ffmpeg(self):
    return(self.__ffmpeg)

  @property
  def ffprobe(self):
    return(self.__ffprobe)

  def extract_video_to_file(self, infile, outfile):
    ffmpeg_parameters = [
      self.ffmpeg,
      "-i", infile,
      "-f", get_extension(infile),
      "-loglevel", "quiet",
      "-vcodec", "copy",
      "-an",
      "-y",
      outfile
    ]

    return(check_call(ffmpeg_parameters))

  def to_video_file(self, infile, outfile, bitrate="2.0", output_format="webm"):
    bitrate = "{0}M".format(bitrate)
    ffmpeg_parameters = [
      self.ffmpeg,
      "-i", infile,
      "-loglevel", "quiet", 
      "-f", output_format,
      "-minrate", bitrate,
      "-maxrate", bitrate,
      "-b:v", bitrate,
      "-y",
      outfile
    ]

    return(check_call(ffmpeg_parameters))

  def get_data_from_file(self, video_file):
    call_ffprobe = [
      self.ffprobe,
      "-i", video_file,
      "-loglevel", "quiet",
      "-show_streams",
      "-print_format", "json"
    ]

    raw_json = check_output(call_ffprobe)
    json = loads(raw_json.decode())

    return(json["streams"][0])


html = Template(
"""<!DOCTYPE html>
<html>
  <meta charset=\"utf-8\">
  <title>$title (${width}x${height}px)</title>
  <style type="text/css">
    * {
      margin: 0;
      padding: 0;
    }
    html, body {
      width: 100%;
      height: 100%;
    }
    html {
      display: table;
    }
    body {
      display: table-cell;
      vertical-align: middle;
      text-align: center;
      background-color: black;
    }
    video, source {
      display: block;
      margin: 0 auto;
    }
  </style>
  <video width=\"${width}\" height=\"${height}\" autoplay=\"autoplay\" loop=\"\">
    <source type=\"${mimetype}\" src=\"data:${mimetype};base64,${data}\">
  </video>
</html>"""
)

def main():
  parser = ArgumentParser(prog="gif2gfy", description="An FFmpeg frontend for converting gifs into standalone gfy files.")
  parser.add_argument("-i", "--infile", required=True, help="Input file")
  parser.add_argument("-c", "--color", default="black", help="Choose background color of gfy; default is black")
  parser.add_argument("-f", "--format", default="webm", help="Choose output format to convert gifs to; default is webm")
  parser.add_argument("-o", "--outfile", help="Set filename of output; default is o.(mp4|webm).html")
  parser.add_argument("-p", "--path", help="Specify a custom directory to look for FFmpeg and FFprobe")
  parser.add_argument("-q", "--quality", default="2", help="Set bitrate in MBs for gif-to-webm conversion; default is 2")
  parser.add_argument("-t", "--title", help="Set title in HTML page; default is whatever -o is set to")
  parser.add_argument("-v", "--video", action="store_true", help="Output pure video instead of HTML")

  args, supported_formats = vars(parser.parse_args()), ("webm", "mp4")

  if not isfile(args["infile"]):
    print("{0} isn't a file. Aborting.".format(args["infile"]))
    exit()

  if args["format"] not in supported_formats:
    print("\"{0}\" is not a support format. Aborting.".format(args["format"]))
    exit()

  """
  Often FFmpeg isn't available due to lack of packaging on Windows and
  Debian-based distros, so being able to define a custom path is a
  sensible fallback
  """
  if args["path"]:
    full_path = abspath(args["path"]) + sep 
    custom_ffmpeg, custom_ffprobe = full_path + "ffmpeg", full_path + "ffprobe"

    if is_executable(custom_ffmpeg) and is_executable(custom_ffprobe):
      ff = ffmpeg(custom_ffmpeg, custom_ffprobe)
    else:
      print("{0} doesn't have FFmpeg or FFprobe. Aborting.".format(full_path))
      exit()

  else: 
  # Python3.3 shutil.which(), which is a more reliable method for checking
  # program availability than distutils.spawn.find_executable()
    if version_info >= (3, 3):
      from shutil import which
    else:
      from distutils.spawn import find_executable as which

    ff = ffmpeg(which("ffmpeg"), which("ffprobe"))

  if not ff.ffmpeg or not ff.ffprobe:
    print("FFmpeg needs to be installed to continue. Aborting.")
    exit()
  
  in_mimetype = get_mimetype(args["infile"])
  in_extension = get_extension(args["infile"])

  """
  There's a bug in FFmpeg where piping doesn't work reliably, so a workaround
  is to write to a tempfile
  """
  with NamedTemporaryFile() as temp:
    if in_extension in ("webm", "mp4"):
      ff.extract_video_to_file(args["infile"], temp.name)
      video_data = open(temp.name, "rb").read()
      out_mimetype, out_extension = in_mimetype, in_extension
      dimensions = ff.get_data_from_file(temp.name)

    elif in_extension == "gif":
      ff.to_video_file(args["infile"], temp.name, args["quality"], args["format"])
      video_data = open(temp.name, "rb").read()
      out_mimetype, out_extension = "video/" + args["format"], args["format"]
      dimensions = ff.get_data_from_file(temp.name)
    else:
      print("Not a supported filetype. Aborting.")
      exit()

  if not args["video"]:  
    if args["outfile"]:
      outfile = args["outfile"]
    else:
      outfile = "o.{0}.html".format(out_extension)

    if args["title"]:
      title = args["title"]
    else:
      title = basename(outfile)

    data = html.safe_substitute({
      "title": title,
      "mimetype": out_mimetype,
      "width": dimensions["width"],
      "height": dimensions["height"],
      "color": args["color"],
      "data": b64encode(video_data).decode()
    })
    write_mode = "w"

  else:
    if args["outfile"]:
      outfile = args["outfile"]
    else:
      outfile = "o.{0}".format(out_extension)

    data, write_mode = video_data, "wb"

  full_outfile_path = abspath(outfile)

  with open(full_outfile_path, write_mode) as f:
    f.write(data)
 
  print(full_outfile_path)

if __name__ == "__main__":
  main()

